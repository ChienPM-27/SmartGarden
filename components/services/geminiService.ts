import { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from '@google/generative-ai';
import * as FileSystem from 'expo-file-system';
import { GEMINI_API_KEY, DEFAULT_MODEL, PROMPT_TEMPLATES } from './api/gemini';

// Kh·ªüi t·∫°o Google Generative AI
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

// C·∫•u h√¨nh retry v√† rate limiting
const MAX_RETRIES = 3;
const INITIAL_RETRY_DELAY = 2000; // 2 gi√¢y

// Chuy·ªÉn ƒë·ªïi h√¨nh ·∫£nh th√†nh Base64
export const getImageAsBase64 = async (uri: string): Promise<string> => {
    try {
        const base64 = await FileSystem.readAsStringAsync(uri, {
            encoding: FileSystem.EncodingType.Base64,
        });
        return base64;
    } catch (error) {
        console.error('L·ªói khi chuy·ªÉn ƒë·ªïi h√¨nh ·∫£nh:', error);
        throw error;
    }
};

// H√†m x√°c ƒë·ªãnh MIME type t·ª´ URI c·ªßa h√¨nh ·∫£nh
export const getMimeType = (uri: string): string => {
    const extension = uri.split('.').pop()?.toLowerCase();
    switch (extension) {
        case 'jpg':
        case 'jpeg':
            return 'image/jpeg';
        case 'png':
            return 'image/png';
        case 'gif':
            return 'image/gif';
        case 'webp':
            return 'image/webp';
        case 'heic':
            return 'image/heic';
        default:
            return 'image/jpeg'; // M·∫∑c ƒë·ªãnh
    }
};

// H√†m sleep ƒë·ªÉ ƒë·ª£i gi·ªØa c√°c l·∫ßn retry
const sleep = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

// H√†m l·∫•y th·ªùi gian retry t·ª´ th√¥ng b√°o l·ªói (n·∫øu c√≥)
const getRetryDelay = (error: any): number => {
    try {
        const errorMessage = error.message || '';
        const retryDelayMatch = errorMessage.match(/retryDelay":"(\d+)s"/);
        if (retryDelayMatch && retryDelayMatch[1]) {
            // Chuy·ªÉn ƒë·ªïi gi√¢y th√†nh milli gi√¢y v√† th√™m buffer
            return (parseInt(retryDelayMatch[1]) * 1000) + 500;
        }
    } catch (e) {
        console.log('Kh√¥ng th·ªÉ parse retry delay t·ª´ l·ªói');
    }
    return INITIAL_RETRY_DELAY;
};

// H√†m ki·ªÉm tra n·∫øu l·ªói do v∆∞·ª£t qu√° quota
const isQuotaExceededError = (error: any): boolean => {
    const errorMessage = error.message || '';
    return errorMessage.includes('quota') || 
           errorMessage.includes('429') || 
           errorMessage.includes('rate limit');
};

// X·ª≠ l√Ω fallback khi kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi Gemini
export const getFallbackResponse = (query: string): string => {
    // M·ªôt s·ªë c√¢u tr·∫£ l·ªùi c∆° b·∫£n cho c√°c tr∆∞·ªùng h·ª£p ph·ªï bi·∫øn
    const fallbackResponses: Record<string, string> = {
        'ch√†o': 'üå± SmartBot: Xin ch√†o! T√¥i l√† SmartBot c·ªßa ·ª©ng d·ª•ng SmartGarden. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n v·ªÅ c√¢y tr·ªìng v√† v∆∞·ªùn c·ªßa b·∫°n?',
        'hello': 'üå± SmartBot: Xin ch√†o! T√¥i l√† SmartBot c·ªßa ·ª©ng d·ª•ng SmartGarden. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n v·ªÅ c√¢y tr·ªìng v√† v∆∞·ªùn c·ªßa b·∫°n?',
        'hi': 'üå± SmartBot: Xin ch√†o! T√¥i l√† SmartBot c·ªßa ·ª©ng d·ª•ng SmartGarden. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n v·ªÅ c√¢y tr·ªìng v√† v∆∞·ªùn c·ªßa b·∫°n?',
        'c·∫£m ∆°n': 'üå± SmartBot: Kh√¥ng c√≥ g√¨! R·∫•t vui khi ƒë∆∞·ª£c gi√∫p ƒë·ª° b·∫°n. N·∫øu c√≥ th·∫Øc m·∫Øc g√¨ th√™m, ƒë·ª´ng ng·∫°i h·ªèi nh√©!',
        'thanks': 'üå± SmartBot: Kh√¥ng c√≥ g√¨! R·∫•t vui khi ƒë∆∞·ª£c gi√∫p ƒë·ª° b·∫°n. N·∫øu c√≥ th·∫Øc m·∫Øc g√¨ th√™m, ƒë·ª´ng ng·∫°i h·ªèi nh√©!',
        't∆∞·ªõi c√¢y': 'üå± SmartBot: ƒê·ªÉ t∆∞·ªõi c√¢y hi·ªáu qu·∫£, b·∫°n n√™n t∆∞·ªõi v√†o bu·ªïi s√°ng s·ªõm ho·∫∑c chi·ªÅu mu·ªôn. Lu√¥n ki·ªÉm tra ƒë·ªô ·∫©m c·ªßa ƒë·∫•t tr∆∞·ªõc khi t∆∞·ªõi ƒë·ªÉ tr√°nh t∆∞·ªõi qu√° nhi·ªÅu n∆∞·ªõc.',
        'ph√¢n b√≥n': 'üå± SmartBot: C√¢y tr·ªìng c·∫ßn ƒë∆∞·ª£c b√≥n ph√¢n ƒë·ªãnh k·ª≥. Ph√¢n h·ªØu c∆° th∆∞·ªùng an to√†n h∆°n ph√¢n h√≥a h·ªçc. H√£y tu√¢n theo h∆∞·ªõng d·∫´n li·ªÅu l∆∞·ª£ng tr√™n bao b√¨.',
        's√¢u b·ªánh': 'üå± SmartBot: Ki·ªÉm tra c√¢y th∆∞·ªùng xuy√™n ƒë·ªÉ ph√°t hi·ªán s√¢u b·ªánh s·ªõm. C√°c bi·ªán ph√°p t·ª± nhi√™n nh∆∞ x√† ph√≤ng, d·∫ßu neem ho·∫∑c c√°c lo√†i thi√™n ƒë·ªãch c√≥ th·ªÉ gi√∫p ki·ªÉm so√°t s√¢u b·ªánh.',
    };

    // T√¨m t·ª´ kh√≥a ph√π h·ª£p trong c√¢u h·ªèi
    const lowercaseQuery = query.toLowerCase();
    for (const keyword in fallbackResponses) {
        if (lowercaseQuery.includes(keyword)) {
            return fallbackResponses[keyword];
        }
    }

    // Ph·∫£n h·ªìi m·∫∑c ƒë·ªãnh
    return 'üå± SmartBot: Hi·ªán t·∫°i t√¥i ƒëang g·∫∑p kh√≥ khƒÉn trong vi·ªác k·∫øt n·ªëi v·ªõi d·ªãch v·ª•. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n v·ªÅ c√°c v·∫•n ƒë·ªÅ c∆° b·∫£n nh∆∞ t∆∞·ªõi c√¢y, ph√¢n b√≥n, ho·∫∑c ph√≤ng tr·ª´ s√¢u b·ªánh?';
};

// K·∫øt n·ªëi v√† nh·∫≠n ph·∫£n h·ªìi t·ª´ Gemini AI v·ªõi c∆° ch·∫ø retry
export const getAIResponse = async (userText: string, imageUri?: string): Promise<string> => {
    let retries = 0;
    let lastError = null;

    while (retries < MAX_RETRIES) {
        try {
            // N·∫øu ƒë√¢y kh√¥ng ph·∫£i l·∫ßn th·ª≠ ƒë·∫ßu ti√™n, ƒë·ª£i m·ªôt kho·∫£ng th·ªùi gian
            if (retries > 0) {
                const delayTime = lastError && isQuotaExceededError(lastError) 
                    ? getRetryDelay(lastError)
                    : INITIAL_RETRY_DELAY * Math.pow(2, retries - 1); // Exponential backoff
                
                console.log(`ƒêang th·ª≠ l·∫°i l·∫ßn ${retries + 1} sau ${delayTime}ms...`);
                await sleep(delayTime);
            }

            // C·∫•u h√¨nh model
            const model = genAI.getGenerativeModel({
                model: DEFAULT_MODEL,
                safetySettings: [
                    {
                        category: HarmCategory.HARM_CATEGORY_HARASSMENT,
                        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
                    },
                    {
                        category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
                        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
                    },
                    {
                        category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
                        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
                    },
                    {
                        category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
                        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
                    },
                ],
            });

            let result;
            
            // X·ª≠ l√Ω khi c√≥ c·∫£ h√¨nh ·∫£nh v√† vƒÉn b·∫£n
            if (imageUri) {
                // Chuy·ªÉn ƒë·ªïi h√¨nh ·∫£nh sang base64
                const base64Image = await getImageAsBase64(imageUri);
                const mimeType = getMimeType(imageUri);
                
                // T·∫°o n·ªôi dung ƒëa ph∆∞∆°ng ti·ªán
                const imagePart = {
                    inlineData: {
                        data: base64Image,
                        mimeType: mimeType,
                    },
                };
                
                // S·ª≠ d·ª•ng prompt template ph√π h·ª£p
                const prompt = userText.trim() 
                    ? PROMPT_TEMPLATES.IMAGE_WITH_TEXT.replace('{query}', userText)
                    : PROMPT_TEMPLATES.IMAGE_ONLY;
                
                // T·∫°o n·ªôi dung cho request
                const content = [imagePart, { text: prompt }];
                
                // G·ª≠i request ƒë·∫øn Gemini
                result = await model.generateContent({
                    contents: [{ role: 'user', parts: content }],
                });
            } else {
                // X·ª≠ l√Ω khi ch·ªâ c√≥ vƒÉn b·∫£n
                const prompt = PROMPT_TEMPLATES.TEXT_ONLY.replace('{query}', userText);
                
                const chat = model.startChat({
                    history: [
                        {
                            role: 'user',
                            parts: [{ text: 'Xin ch√†o, b·∫°n c√≥ th·ªÉ gi√∫p t√¥i chƒÉm s√≥c c√¢y tr·ªìng kh√¥ng?' }],
                        },
                        {
                            role: 'model',
                            parts: [{ text: 'Ch√†o b·∫°n! T√¥i l√† SmartBot c·ªßa ·ª©ng d·ª•ng SmartGarden. T√¥i r·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n chƒÉm s√≥c c√¢y tr·ªìng. B·∫°n c·∫ßn h·ªó tr·ª£ v·ªÅ v·∫•n ƒë·ªÅ g√¨?' }],
                        },
                    ],
                });
                
                result = await chat.sendMessage(prompt);
            }

            // X·ª≠ l√Ω k·∫øt qu·∫£
            const response = result.response;
            let text = response.text();
            
            // ƒê·∫£m b·∫£o ph·∫£n h·ªìi lu√¥n c√≥ ti·ªÅn t·ªë SmartBot
            if (!text.includes('SmartBot')) {
                text = `üå± SmartBot: ${text}`;
            }
            
            return text;
        } catch (error) {
            console.error(`L·ªói khi k·∫øt n·ªëi v·ªõi Gemini AI (l·∫ßn th·ª≠ ${retries + 1}):`, error);
            lastError = error;
            retries++;
            
            // N·∫øu kh√¥ng ph·∫£i l·ªói quota ho·∫∑c ƒë√£ h·∫øt s·ªë l·∫ßn th·ª≠, kh√¥ng retry n·ªØa
            if (!isQuotaExceededError(error)) {
                break;
            }
        }
    }

    // N·∫øu t·∫•t c·∫£ c√°c l·∫ßn th·ª≠ ƒë·ªÅu th·∫•t b·∫°i, tr·∫£ v·ªÅ ph·∫£n h·ªìi fallback
    console.log('ƒê√£ th·ª≠ l·∫°i t·ªëi ƒëa, chuy·ªÉn sang ph·∫£n h·ªìi fallback');
    return getFallbackResponse(userText);
};